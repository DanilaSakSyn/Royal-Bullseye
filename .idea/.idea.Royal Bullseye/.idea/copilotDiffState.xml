<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/Assets/Scripts/Game/GameEndManager.cs">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/Assets/Scripts/Game/GameEndManager.cs" />
              <option name="originalContent" value="using System.Collections.Generic;&#10;using UnityEngine;&#10;using UnityEngine.SceneManagement;&#10;using Game.UI;&#10;&#10;namespace Game&#10;{&#10;    public class GameEndManager : MonoBehaviour&#10;    {&#10;        [Header(&quot;UI Elements&quot;)]&#10;        [SerializeField] private GameObject winScreen;&#10;        [SerializeField] private List&lt;GameObject&gt; starsObjects;&#10;        [SerializeField] private TMPro.TextMeshProUGUI scoreText;&#10;        [SerializeField] private UnityEngine.UI.Button restartButton;&#10;        [SerializeField] private UnityEngine.UI.Button menuButton;&#10;        [SerializeField] private StarPanel starPanel;&#10;        &#10;        [Space(20)]&#10;        [SerializeField] private RandomSpawner spawner;&#10;&#10;        private void Awake()&#10;        {&#10;            winScreen.SetActive(false);&#10;            restartButton.onClick.AddListener(RestartGame);&#10;            menuButton.onClick.AddListener(GoToMenu);&#10;        }&#10;&#10;        public void ShowWinScreen()&#10;        {&#10;            spawner.Stop();&#10;            winScreen.SetActive(true);&#10;            int stars = starPanel != null ? starPanel.GetCurrentStars() : 0;&#10;            int score = GameScoreManager.Instance != null ? GameScoreManager.Instance.GetScore() : 0;&#10;            for (int i = 0; i &lt; starsObjects.Count; i++)&#10;            {&#10;                if (i &lt; stars)&#10;                    starsObjects[i].SetActive(true);&#10;                else&#10;                {&#10;                    starsObjects[i].SetActive(false);&#10;                        &#10;                }&#10;            }&#10;            scoreText.text = $&quot;{score}&quot;;&#10;        }&#10;&#10;        private void RestartGame()&#10;        {&#10;            SceneManager.LoadScene(SceneManager.GetActiveScene().buildIndex);&#10;        }&#10;&#10;        private void GoToMenu()&#10;        {&#10;            SceneManager.LoadScene(&quot;Menu&quot;); // Название сцены меню&#10;        }&#10;    }&#10;}&#10;&#10;" />
              <option name="updatedContent" value="using System.Collections.Generic;&#10;using UnityEngine;&#10;using UnityEngine.SceneManagement;&#10;using Game.UI;&#10;&#10;namespace Game&#10;{&#10;    public class GameEndManager : MonoBehaviour&#10;    {&#10;        [Header(&quot;UI Elements&quot;)]&#10;        [SerializeField] private GameObject winScreen;&#10;        [SerializeField] private List&lt;GameObject&gt; starsObjects;&#10;        [SerializeField] private TMPro.TextMeshProUGUI scoreText;&#10;        [SerializeField] private UnityEngine.UI.Button restartButton;&#10;        [SerializeField] private UnityEngine.UI.Button menuButton;&#10;        [SerializeField] private StarPanel starPanel;&#10;        [SerializeField] private TMPro.TextMeshProUGUI coinsText;&#10;        &#10;        [Space(20)]&#10;        [SerializeField] private RandomSpawner spawner;&#10;&#10;        private void Awake()&#10;        {&#10;            winScreen.SetActive(false);&#10;            restartButton.onClick.AddListener(RestartGame);&#10;            menuButton.onClick.AddListener(GoToMenu);&#10;        }&#10;&#10;        public void ShowWinScreen()&#10;        {&#10;            spawner.Stop();&#10;            winScreen.SetActive(true);&#10;            int stars = starPanel != null ? starPanel.GetCurrentStars() : 0;&#10;            int score = GameScoreManager.Instance != null ? GameScoreManager.Instance.GetScore() : 0;&#10;            int coinsReward = stars * Random.Range(5, 16); // случайное количество монет за звезду&#10;            if (Game.Wallet.Wallet.Instance != null)&#10;            {&#10;                Game.Wallet.Wallet.Instance.AddCoins(coinsReward);&#10;            }&#10;            for (int i = 0; i &lt; starsObjects.Count; i++)&#10;            {&#10;                if (i &lt; stars)&#10;                    starsObjects[i].SetActive(true);&#10;                else&#10;                {&#10;                    starsObjects[i].SetActive(false);&#10;                }&#10;            }&#10;            scoreText.text = $&quot;{score}&quot;;&#10;            if (coinsText != null)&#10;                coinsText.text = coinsReward.ToString();&#10;        }&#10;&#10;        private void RestartGame()&#10;        {&#10;            SceneManager.LoadScene(SceneManager.GetActiveScene().buildIndex);&#10;        }&#10;&#10;        private void GoToMenu()&#10;        {&#10;            SceneManager.LoadScene(&quot;Menu&quot;); // Название сцены меню&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/Assets/Scripts/Game/RandomSpawner.cs">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/Assets/Scripts/Game/RandomSpawner.cs" />
              <option name="originalContent" value="using System.Collections;&#10;using System.Collections.Generic;&#10;using UnityEngine;&#10;&#10;namespace Game&#10;{&#10;    public class RandomSpawner : MonoBehaviour&#10;    {&#10;        [Header(&quot;Spawn Settings&quot;)] [SerializeField]&#10;        private GameObject objectToSpawn; // Prefab to spawn&#10;&#10;        [SerializeField] private float spawnRadius = 5f; // Radius of the spawn area&#10;        [SerializeField] private int numberOfObjects = 10; // Number of objects to spawn&#10;        [SerializeField] private float spawnInterval = 1f; // Time between spawns&#10;        [SerializeField] private bool spawnOnStart = true; // Whether to start spawning automatically&#10;        [SerializeField] private Vector3 spawnCenter = Vector3.zero; // Center of the spawn area&#10;&#10;        [Header(&quot;Dynamic Interval Settings&quot;)] [SerializeField]&#10;        private float minSpawnInterval = 0.2f;&#10;&#10;        [SerializeField] private float maxSpawnInterval = 2f;&#10;        [SerializeField] private int maxSpawnCount = 4;&#10;        [SerializeField] private List&lt;GameObject&gt; spawnedObjects = new List&lt;GameObject&gt;();&#10;        [SerializeField] private AnimationCurve intervalCurve;&#10;&#10;        private Coroutine spawnCoroutine;&#10;&#10;        private void Awake()&#10;        {&#10;            // Генерируем случайную синусоидальную кривую с шумом&#10;            Keyframe[] keys = new Keyframe[5];&#10;            for (int i = 0; i &lt; keys.Length; i++)&#10;            {&#10;                float t = i / (float)(keys.Length - 1);&#10;                float value = Mathf.Sin(t * Mathf.PI) * 0.5f + 0.5f + Random.Range(-0.15f, 0.15f);&#10;                value = Mathf.Clamp01(value);&#10;                keys[i] = new Keyframe(t, value);&#10;            }&#10;&#10;            intervalCurve = new AnimationCurve(keys);&#10;        }&#10;&#10;        private void Start()&#10;        {&#10;            if (spawnOnStart)&#10;            {&#10;                StartCoroutine(SpawnObjects());&#10;            }&#10;        }&#10;&#10;        // Call this method to start spawning objects&#10;        public void StartSpawning()&#10;        {&#10;            spawnCoroutine = StartCoroutine(SpawnObjects());&#10;        }&#10;&#10;        // Метод для удаления всех заспавненных объектов и остановки спавна&#10;        public void ClearSpawnedObjects()&#10;        {&#10;            if (spawnCoroutine != null)&#10;            {&#10;                StopCoroutine(spawnCoroutine);&#10;                spawnCoroutine = null;&#10;            }&#10;            foreach (var obj in spawnedObjects)&#10;            {&#10;                if (obj != null)&#10;                    Destroy(obj);&#10;            }&#10;            spawnedObjects.Clear();&#10;        }&#10;&#10;        private IEnumerator SpawnObjects()&#10;        {&#10;            for (int i = 0; i &lt; numberOfObjects; i++)&#10;            {&#10;                // Generate a random point within the circle&#10;                Vector2 randomPoint = GetRandomPointInCircle(transform.position, spawnRadius);&#10;&#10;                // Spawn the object at the random point&#10;                var spawnedObject = Instantiate(objectToSpawn, randomPoint, Quaternion.identity);&#10;                spawnedObjects.Add(spawnedObject);&#10;                // Wait for the specified interval before spawning the next object&#10;                float progress = numberOfObjects &gt; 1 ? i / (float)(numberOfObjects - 1) : 0f;&#10;                float curveValue = intervalCurve.Evaluate(progress);&#10;                float dynamicInterval = Mathf.Lerp(minSpawnInterval, maxSpawnInterval, curveValue);&#10;&#10;                yield return new WaitForSeconds(dynamicInterval);&#10;&#10;                while (spawnedObjects.Count &gt; maxSpawnCount)&#10;                {&#10;                    for (int j = 0; j &lt; spawnedObjects.Count; j++)&#10;                    {&#10;                        if (spawnedObjects[j] == null)&#10;                        {&#10;                            spawnedObjects.RemoveAt(j);&#10;                            break;&#10;                        }&#10;                    }&#10;&#10;                    yield return null;&#10;                }&#10;            }&#10;        }&#10;&#10;        // Helper method to get a random point within a circle&#10;        private Vector2 GetRandomPointInCircle(Vector2 center, float radius)&#10;        {&#10;            // Generate a random angle in radians&#10;            float angle = Random.Range(0f, 2f * Mathf.PI);&#10;&#10;            // Generate a random distance from the center (square root for uniform distribution)&#10;            float distance = Mathf.Sqrt(Random.Range(0f, 1f)) * radius;&#10;&#10;            // Convert polar coordinates to Cartesian coordinates&#10;            float x = center.x + distance * Mathf.Cos(angle);&#10;            float y = center.y + distance * Mathf.Sin(angle);&#10;&#10;            return new Vector2(x, y);&#10;        }&#10;&#10;        // Draw the spawn area in the editor for easier visualization&#10;        private void OnDrawGizmosSelected()&#10;        {&#10;            Gizmos.color = new Color(1f, 0f, 0f, 0.3f);&#10;            Gizmos.DrawWireSphere(spawnCenter, spawnRadius);&#10;        }&#10;&#10;        public void Stop()&#10;        {&#10;          &#10;        }&#10;    }&#10;}" />
              <option name="updatedContent" value="using System.Collections;&#10;using System.Collections.Generic;&#10;using UnityEngine;&#10;&#10;namespace Game&#10;{&#10;    public class RandomSpawner : MonoBehaviour&#10;    {&#10;        [Header(&quot;Spawn Settings&quot;)] [SerializeField]&#10;        private GameObject objectToSpawn; // Prefab to spawn&#10;&#10;        [SerializeField] private float spawnRadius = 5f; // Radius of the spawn area&#10;        [SerializeField] private int numberOfObjects = 10; // Number of objects to spawn&#10;        [SerializeField] private float spawnInterval = 1f; // Time between spawns&#10;        [SerializeField] private bool spawnOnStart = true; // Whether to start spawning automatically&#10;        [SerializeField] private Vector3 spawnCenter = Vector3.zero; // Center of the spawn area&#10;&#10;        [Header(&quot;Dynamic Interval Settings&quot;)] [SerializeField]&#10;        private float minSpawnInterval = 0.2f;&#10;&#10;        [SerializeField] private float maxSpawnInterval = 2f;&#10;        [SerializeField] private int maxSpawnCount = 4;&#10;        [SerializeField] private List&lt;GameObject&gt; spawnedObjects = new List&lt;GameObject&gt;();&#10;        [SerializeField] private AnimationCurve intervalCurve;&#10;&#10;        private Coroutine spawnCoroutine;&#10;&#10;        private void Awake()&#10;        {&#10;            // Генерируем случайную синусоидальную кривую с шумом&#10;            Keyframe[] keys = new Keyframe[5];&#10;            for (int i = 0; i &lt; keys.Length; i++)&#10;            {&#10;                float t = i / (float)(keys.Length - 1);&#10;                float value = Mathf.Sin(t * Mathf.PI) * 0.5f + 0.5f + Random.Range(-0.15f, 0.15f);&#10;                value = Mathf.Clamp01(value);&#10;                keys[i] = new Keyframe(t, value);&#10;            }&#10;&#10;            intervalCurve = new AnimationCurve(keys);&#10;        }&#10;&#10;        private void Start()&#10;        {&#10;            if (spawnOnStart)&#10;            {&#10;                StartCoroutine(SpawnObjects());&#10;            }&#10;        }&#10;&#10;        // Call this method to start spawning objects&#10;        public void StartSpawning()&#10;        {&#10;            spawnCoroutine = StartCoroutine(SpawnObjects());&#10;        }&#10;&#10;        // Метод для удаления всех заспавненных объектов и остановки спавна&#10;        public void ClearSpawnedObjects()&#10;        {&#10;            if (spawnCoroutine != null)&#10;            {&#10;                StopCoroutine(spawnCoroutine);&#10;                spawnCoroutine = null;&#10;            }&#10;            foreach (var obj in spawnedObjects)&#10;            {&#10;                if (obj != null)&#10;                    Destroy(obj);&#10;            }&#10;            spawnedObjects.Clear();&#10;        }&#10;&#10;        private IEnumerator SpawnObjects()&#10;        {&#10;            for (int i = 0; i &lt; numberOfObjects; i++)&#10;            {&#10;                // Generate a random point within the circle&#10;                Vector2 randomPoint = GetRandomPointInCircle(transform.position, spawnRadius);&#10;&#10;                // Spawn the object at the random point&#10;                var spawnedObject = Instantiate(objectToSpawn, randomPoint, Quaternion.identity);&#10;                spawnedObjects.Add(spawnedObject);&#10;                // Wait for the specified interval before spawning the next object&#10;                float progress = numberOfObjects &gt; 1 ? i / (float)(numberOfObjects - 1) : 0f;&#10;                float curveValue = intervalCurve.Evaluate(progress);&#10;                float dynamicInterval = Mathf.Lerp(minSpawnInterval, maxSpawnInterval, curveValue);&#10;&#10;                yield return new WaitForSeconds(dynamicInterval);&#10;&#10;                while (spawnedObjects.Count &gt; maxSpawnCount)&#10;                {&#10;                    for (int j = 0; j &lt; spawnedObjects.Count; j++)&#10;                    {&#10;                        if (spawnedObjects[j] == null)&#10;                        {&#10;                            spawnedObjects.RemoveAt(j);&#10;                            break;&#10;                        }&#10;                    }&#10;&#10;                    yield return null;&#10;                }&#10;            }&#10;        }&#10;&#10;        // Helper method to get a random point within a circle&#10;        private Vector2 GetRandomPointInCircle(Vector2 center, float radius)&#10;        {&#10;            // Generate a random angle in radians&#10;            float angle = Random.Range(0f, 2f * Mathf.PI);&#10;&#10;            // Generate a random distance from the center (square root for uniform distribution)&#10;            float distance = Mathf.Sqrt(Random.Range(0f, 1f)) * radius;&#10;&#10;            // Convert polar coordinates to Cartesian coordinates&#10;            float x = center.x + distance * Mathf.Cos(angle);&#10;            float y = center.y + distance * Mathf.Sin(angle);&#10;&#10;            return new Vector2(x, y);&#10;        }&#10;&#10;        // Draw the spawn area in the editor for easier visualization&#10;        private void OnDrawGizmosSelected()&#10;        {&#10;            Gizmos.color = new Color(1f, 0f, 0f, 0.3f);&#10;            Gizmos.DrawWireSphere(spawnCenter, spawnRadius);&#10;        }&#10;&#10;        public void Stop()&#10;        {&#10;            StopAllCoroutines();&#10;            foreach (var obj in spawnedObjects)&#10;            {&#10;                if (obj != null)&#10;                {&#10;                    Destroy(obj);&#10;                }&#10;            }&#10;            spawnedObjects.Clear();&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/Assets/Scripts/Game/Shop/ShopItem.cs">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/Assets/Scripts/Game/Shop/ShopItem.cs" />
              <option name="updatedContent" value="using UnityEngine;&#10;&#10;namespace Game.Shop&#10;{&#10;    [CreateAssetMenu(fileName = &quot;New Shop Item&quot;, menuName = &quot;Shop/Shop Item&quot;)]&#10;    public class ShopItem : ScriptableObject&#10;    {&#10;        [SerializeField] private string itemId;&#10;        [SerializeField] private string itemName;&#10;        [SerializeField] private int cost;&#10;        [SerializeField] private Sprite itemSprite;&#10;        [SerializeField] private bool isDefault = false;&#10;&#10;        public string ItemId =&gt; itemId;&#10;        public string ItemName =&gt; itemName;&#10;        public int Cost =&gt; cost;&#10;        public Sprite ItemSprite =&gt; itemSprite;&#10;        public bool IsDefault =&gt; isDefault;&#10;&#10;        private void OnValidate()&#10;        {&#10;            if (string.IsNullOrEmpty(itemId))&#10;            {&#10;                itemId = name.Replace(&quot; &quot;, &quot;_&quot;).ToLower();&#10;            }&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/Assets/Scripts/Game/SoundManager.cs">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/Assets/Scripts/Game/SoundManager.cs" />
              <option name="originalContent" value="&#10;" />
              <option name="updatedContent" value="using UnityEngine;&#10;&#10;namespace Game&#10;{&#10;    public class SoundManager : MonoBehaviour&#10;    {&#10;        public AudioClip[] soundEffects;&#10;        private static SoundManager instance;&#10;        private AudioSource audioSource;&#10;&#10;        private void Awake()&#10;        {&#10;            if (instance == null)&#10;            {&#10;                instance = this;&#10;                audioSource = gameObject.AddComponent&lt;AudioSource&gt;();&#10;                DontDestroyOnLoad(gameObject);&#10;            }&#10;            else&#10;            {&#10;                Destroy(gameObject);&#10;            }&#10;        }&#10;&#10;        /// &lt;summary&gt;&#10;        /// Воспроизводит звуковой эффект по индексу из массива soundEffects.&#10;        /// &lt;/summary&gt;&#10;        public static void PlaySound(int index, bool randomPitch = false)&#10;        {&#10;            if (instance == null || instance.soundEffects == null || index &lt; 0 || index &gt;= instance.soundEffects.Length)&#10;                return;&#10;            if (randomPitch)&#10;                instance.audioSource.pitch = Random.Range(0.9f, 1.1f);&#10;            else&#10;                instance.audioSource.pitch = 1f;&#10;            instance.audioSource.PlayOneShot(instance.soundEffects[index]);&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/Assets/Scripts/Game/Wallet/Wallet.cs">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/Assets/Scripts/Game/Wallet/Wallet.cs" />
              <option name="updatedContent" value="using UnityEngine;&#10;&#10;namespace Game.Wallet&#10;{&#10;    public class Wallet : MonoBehaviour&#10;    {&#10;        public static Wallet Instance { get; private set; }&#10;        private const string CoinsKey = &quot;WalletCoins&quot;;&#10;        private int coins;&#10;&#10;        public int Coins =&gt; coins;&#10;&#10;        private void Awake()&#10;        {&#10;            if (Instance != null &amp;&amp; Instance != this)&#10;            {&#10;                Destroy(gameObject);&#10;                return;&#10;            }&#10;            Instance = this;&#10;            DontDestroyOnLoad(gameObject);&#10;            coins = PlayerPrefs.GetInt(CoinsKey, 0);&#10;        }&#10;&#10;        public void AddCoins(int amount)&#10;        {&#10;            coins += amount;&#10;            PlayerPrefs.SetInt(CoinsKey, coins);&#10;            PlayerPrefs.Save();&#10;        }&#10;    }&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>